 Types of Queries

1. Data Definition Language (DDL)
DDL is used to define, modify, and delete database structures.
DDL Commands:
    CREATE: Used to create a new table or database.
       Example: 
        CREATE TABLE students (
             id INT PRIMARY KEY,
             name VARCHAR(50),
             rollno INT
            )
    ALTER: Used to modify an existing database structure.
        Example: 
        ALTER TABLE students ADD collegename VARCHAR(100);
    DROP: Used to delete tables or databases.
        Example: 
        DROP TABLE students;
    TRUNCATE:  Remove all records from a table without deleting the table itself.
        Example: 
         TRUNCATE TABLE students;

2. Data Manipulation Language (DML)
Manipulate data within existing database objects.
DML Commands:
    SELECT: Retrieve data from one or more tables.
        Example:
        SELECT * FROM students;
    INSERT: Add new records to a table.
         Example:
         INSERT INTO students (id, name,rollno) VALUES (1, 'Anu',3);
    UPDATE: Modify existing records.
         Example:
         UPDATE students SET rollno = 2 WHERE id = 1;
    DELETE: Remove records from a table.
          Example:
           DELETE FROM students WHERE id = 1;

3. Data Control Language (DCL)
   DCL is used to control access to data in the database.
   DCL Commands:
    GRANT: Gives user access privileges to the database.
        Example: 
         GRANT SELECT ON students TO user1;
    REVOKE: Takes back user access privileges.
        Example: 
         REVOKE INSERT ON students FROM user1;

4. Transaction Control Language (TCL)
   Manage transactions to ensure data integrity.
Commands:
COMMIT: Save all changes made in the current transaction.
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'newemail@example.com' WHERE StudentId = 1;
    INSERT INTO MARKS (StudentId, SubjectId, Mark) VALUES (1, 101, 85);
COMMIT;
ROLLBACK: Undo changes since the last commit.
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'wrongemail@example.com' WHERE StudentId = 1;
    DELETE FROM MARKS WHERE StudentId = 1;
    -- Suppose we realize there's a mistake
ROLLBACK;
SAVEPOINT: Set a point within a transaction where you can roll back to if necessary
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'firstemail@example.com' WHERE StudentId = 1;
    SAVEPOINT sp1;  -- Setting a savepoint
    UPDATE STUDENT SET Email = 'secondemail@example.com' WHERE StudentId = 1;
    -- If we decide to undo the second update
ROLLBACK TO SAVEPOINT sp1;
COMMIT;
SET TRANSACTION: Define characteristics for the transaction.
Example:
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'email@example.com' WHERE StudentId = 1;
COMMIT;

5. Data Query Language (DQL)
   Retrieve data from the database.
Commands:
Primarily the SELECT statement.
Example:
SELECT * FROM STUDENT WHERE Name = 'Anu';

SQL Clauses and Commands
1. SELECT
   Fetch data from one or more tables.
Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition;
Example:
SELECT StudentName, Email FROM STUDENT;


2. WHERE
Filter records based on specific conditions.
Usage: Used with SELECT, UPDATE, DELETE.
Operators: =, >, <, >=, <=, <>, BETWEEN, LIKE, IN, AND, OR.
Example:
SELECT * FROM STUDENT WHERE Email LIKE '%@example.com';


3. ORDER BY
Arrange the result set in a specified order.
Syntax:
SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;
Example:
SELECT StudentName, Email FROM STUDENT ORDER BY StudentName ASC;


4. GROUP BY
Purpose: Group rows that have the same values in specified columns.
Usage: Often used with aggregate functions (COUNT, SUM, AVG, MAX, MIN).
Syntax:
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1;
Example:
SELECT SubjectId, COUNT(*) AS NumStudents
FROM MARKS
GROUP BY SubjectId;

5. HAVING
 Filter groups based on aggregate conditions.
Usage: Used with GROUP BY.
Syntax:
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1
HAVING aggregate_function(column2) condition;
Example:
SELECT SubjectId, AVG(Mark) AS AverageMark
FROM MARKS
GROUP BY SubjectId
HAVING AVG(Mark) > 80;

Types of SQL Joins
Joins are used to combine rows from two or more tables based on related columns.

1. INNER JOIN
Returns records that have matching values in both tables.
Syntax:
SELECT columns
FROM table1
INNER JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
INNER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

2. LEFT (OUTER) JOIN
Returns all records from the left table and matched records from the right table. Unmatched right records are NULL.
Syntax:
SELECT columns
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
LEFT JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

3. RIGHT (OUTER) JOIN
Returns all records from the right table and matched records from the left table. Unmatched left records are NULL.
Syntax:
SELECT columns
FROM table1
RIGHT JOIN table2 ON table1.column = table2.column;
Example:
SELECT marks.Mark, student.StudentName
FROM MARKS
RIGHT JOIN STUDENT ON MARKS.StudentId = STUDENT.StudentId;

4. FULL (OUTER) JOIN
Returns all records when there is a match in either left or right table. Unmatched records are NULL.
Syntax:
SELECT columns
FROM table1
FULL OUTER JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
FULL OUTER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

Aggregate Functions
Aggregate functions perform calculations on a set of values and return a single value.

Common Aggregate Functions
COUNT() - 
Counts the number of rows in a specified column or table.
SELECT COUNT(*) AS total_employees FROM employees;

SUM() - Calculates the total sum of a numeric column.
SELECT SUM(salary) AS total_salary FROM employees;

AVG() - Calculates the average value of a numeric column.
SELECT AVG(salary) AS average_salary FROM employees;

MIN() - Returns the minimum value in a specified column.
SELECT MIN(salary) AS lowest_salary FROM employees;

MAX() - Returns the maximum value in a specified column.
SELECT MAX(salary) AS highest_salary FROM employees;
Usage with GROUP BY
Using Aggregate Functions with GROUP BY
Aggregate functions are often used with GROUP BY to summarize data:
Example:
SELECT department, SUM(salary) AS total_salary
FROM employees
GROUP BY department;

SQL Data Manipulation Commands

1. INSERT INTO
Add new records to a table.
Syntax:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);
Example:
 INSERT INTO employees (first_name, last_name)
VALUES ('Anu', 'Raj');

2. UPDATE
Modify existing records in a table.
Syntax:
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Example:
UPDATE employees
SET department = 'cs'
WHERE employee_id = 1;

3. DELETE
Remove records from a table.
Syntax:
DELETE FROM table_name
WHERE condition;
Example:
DELETE FROM MARKS WHERE Mark < 50;

d. TRUNCATE
 The TRUNCATE statement in SQL is used to remove all rows from a table while 
 keeping the table structure intact. It is a fast and efficient way to delete 
 all records, as it does not log individual row deletions like the DELETE
 statement does.
Syntax:
TRUNCATE TABLE table_name;
example: 
TRUNCATE TABLE employees;

Transactions
A transaction is a sequence of one or more SQL operations treated as a single unit to ensure data integrity.

ACID Properties
Atomicity: Ensures all operations within the transaction are completed; if not, the transaction is aborted.
Consistency: Ensures the database remains in a valid state before and after the transaction.
Isolation: Ensures transactions are isolated from each other until they are completed.
Durability: Ensures that once a transaction is committed, it remains so, even in the event of a system failure.

Transaction Control Commands

1. COMMIT
Saves all changes made in the current transaction.
COMMIT;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'newemail@example.com' WHERE StudentId = 1;
COMMIT;

2. ROLLBACK
 Undoes all changes made in the current transaction.
ROLLBACK;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'invalid_email' WHERE StudentId = 1;
    -- Suppose an error occurs here
ROLLBACK;

3. SAVEPOINT
 Sets a point within a transaction to which you can later roll back.
SAVEPOINT savepoint_name;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'alice@example.com' WHERE StudentId = 1;
    SAVEPOINT sp1;
    UPDATE STUDENT SET Email = 'alice_new@example.com' WHERE StudentId = 1;
    -- If needed, rollback to sp1
    ROLLBACK TO SAVEPOINT sp1;
COMMIT;

4. CHECKPOINT
Saves all dirty pages (modified data not yet written to disk) to disk. This is more relevant to database administration and ensures recovery consistency.
CHECKPOINT;

Distinct Command
Ensures that each value in the result set is unique.
Syntax:
SELECT DISTINCT column1, column2, ...
FROM table_name;
Example:
SELECT DISTINCT DepartmentID
FROM Employees;


Stored Procedures, Functions, and Triggers

1.Stored Procedures
Precompiled collections of SQL statements stored in the database for reuse.
Benefits:
Encapsulate complex operations.
Enhance performance through precompilation.
Promote code reuse and maintainability.
Improve security by controlling access to data.
Syntax:
CREATE PROCEDURE procedure_name
AS
BEGIN
    SQL statements
END;

Example:
CREATE PROCEDURE GetStudentMarks
    @StudentId INT
AS
BEGIN
    SELECT SubjectName, Mark
    FROM MARKS
    INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId
    WHERE StudentId = @StudentId;
END;

2. Functions
Similar to stored procedures but return a single value or a table and can be used within SQL statements.
Types:
Scalar Functions: Return a single value.
Table-Valued Functions: Return a table.

Syntax:
CREATE FUNCTION function_name (@param datatype, ...)
RETURNS return_datatype
AS
BEGIN
    -- Function body
    RETURN value;
END;

Example (Scalar Function):
CREATE FUNCTION GetStudentEmail (@StudentId INT)
RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @Email VARCHAR(50);
    SELECT @Email = Email FROM STUDENT WHERE StudentId = @StudentId;
    RETURN @Email;
END;

Example (Table-Valued Function):
CREATE FUNCTION GetMarksByStudent (@StudentId INT)
RETURNS TABLE
AS
RETURN
(
    SELECT SubjectName, Mark
    FROM MARKS
    INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId
    WHERE StudentId = @StudentId
);

3. Triggers
Automatically execute predefined actions in response to certain events on a table or view.

Syntax:
CREATE TRIGGER trigger_name
ON table_name
{ AFTER | INSTEAD OF } { INSERT, UPDATE, DELETE }
AS
BEGIN
    -- Trigger actions
END;

Example (DML Trigger):
CREATE TRIGGER trgAfterInsertStudent
ON STUDENT
AFTER INSERT
AS
BEGIN
    PRINT 'A new student record has been inserted.';
END;

 Types of Triggers
a. BEFORE Triggers
Note: Not supported in all RDBMS (e.g., MySQL supports them, SQL Server does not; instead, SQL Server uses INSTEAD OF triggers).
Purpose: Execute actions before the triggering event occurs.
Use Cases: Validate data before insertion or modification.

b. AFTER Triggers
Purpose: Execute actions after the triggering event occurs.
Use Cases: Logging changes, enforcing business rules.

c. INSTEAD OF Triggers
Purpose: Execute actions instead of the triggering event.
Use Cases: Modify behavior of INSERT, UPDATE, DELETE operations on views.

Views
 Virtual tables representing the result of a stored SELECT query. They simplify complex queries, enhance security, and provide a layer of abstraction.
Benefits:
Simplify data access by encapsulating complex joins and queries.
Enhance security by restricting access to specific data.
Provide a consistent, stable interface to underlying data.

Syntax:
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table1
JOIN table2 ON table1.column = table2.column
WHERE condition;

Example:
CREATE VIEW StudentMarks AS
SELECT student.StudentName, subject.SubjectName, marks.Mark
FROM STUDENT
INNER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId
INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId;

Limitations

-Some views are read-only, meaning you cannot directly modify the underlying data through 
 them. This is especially true for complex views that involve joins, aggregations, or
 certain functions.

-Views can introduce performance overhead, particularly if they involve complex queries or
multiple joins. The database must execute the underlying query each time the view is
accessed.

-Views themselves cannot be indexed directly. However, materialized views (in some databases)
can store the result set and be indexed, but standard views do not support this.

-If the structure of the underlying tables changes (e.g., columns are added or removed), the
view may become invalid, requiring updates to the view definition.


-Some SQL operations cannot be performed on views, such as:
    Using ORDER BY without a TOP or LIMIT clause in certain contexts.
    Using certain aggregate functions directly in a view that is intended for updates.

-Managing permissions on views can become complex, especially if views are nested or depend
on other views. Changes in underlying permissions can also impact views.

-While nesting views can provide additional abstraction, it can lead to performance issues
and complexity. Each nested view introduces additional layers of processing.















